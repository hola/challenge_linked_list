// Generated by CoffeeScript 1.8.0
(function() {
  var A, B, C, D, L, assert, list, other_list, x;

  assert = require('assert');

  L = require('../linked_list_proc');

  list = {
    name: 'list'
  };

  A = {
    name: 'A'
  };

  B = {
    name: 'B'
  };

  C = {
    name: 'C'
  };

  D = {
    name: 'D'
  };

  L.init(list);

  L.init(A);

  L.init(B);

  L.init(C);

  L.init(D);

  assert.ok(L.isEmpty(list));

  assert.equal(null, L.peek(list));

  L.append(list, A);

  assert.equal(A, L.peek(list));

  L.append(list, B);

  assert.equal(A, L.peek(list));

  L.append(list, C);

  assert.equal(A, L.peek(list));

  L.append(list, D);

  assert.equal(A, L.peek(list));

  x = L.shift(list);

  assert.equal(A, x);

  assert.equal(B, L.peek(list));

  x = L.shift(list);

  assert.equal(B, x);

  assert.equal(C, L.peek(list));

  L.remove(list, B);

  assert.equal(C, L.peek(list));

  L.append(list, B);

  assert.equal(C, L.peek(list));

  L.remove(list, C);

  assert.equal(D, L.peek(list));

  L.remove(list, B);

  assert.equal(D, L.peek(list));

  L.remove(list, D);

  assert.equal(null, L.peek(list));

  assert.ok(L.isEmpty(list));

  L.append(list, D);

  assert.equal(D, L.peek(list));

  L.append(list, C);

  L.append(list, B);

  L.append(list, A);

  L.append(list, C);

  assert.equal(D, L.shift(list));

  assert.equal(B, L.peek(list));

  assert.equal(B, L.shift(list));

  assert.equal(A, L.peek(list));

  assert.equal(A, L.shift(list));

  assert.equal(C, L.peek(list));

  assert.equal(C, L.shift(list));

  assert.ok(L.isEmpty(list));

  other_list = {
    name: 'other'
  };

  L.init(other_list);

  L.append(list, A);

  L.append(other_list, A);

  assert.equal(A, L.peek(list));

  assert.equal(A, L.peek(other_list));

  L.remove(list, A);

  assert.equal(null, L.peek(list));

  assert.equal(A, L.peek(other_list));

}).call(this);
